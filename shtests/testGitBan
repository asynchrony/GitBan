#! /bin/sh
# $Id$
# vim: expandtab
# author: Kate Ward <kate.ward@forestent.com>
#
# Self-testing unit tests for shUnit2 asserts
#

MSG='This is a test message'
. "./gitBan.sh"
#-----------------------------------------------------------------------------
# suite tests
#

	msg_from_fetch_with_new_branches=$(cat <<- EOF
 remote: Counting objects: 4006, done.
remote: Compressing objects: 100% (1322/1322), done.
remote: Total 2783 (delta 1526), reused 2587 (delta 1387)
Receiving objects: 100% (2783/2783), 1.23 MiB | 10 KiB/s, done.
Resolving deltas: 100% (1526/1526), completed with 387 local objects.
From github.com:schacon/hw
   8e29b09..c7c5a10  master     -> github/master
   0709fdc..d4ccf73  c-langs    -> github/c-langs
   6684f82..ae06d2b  java       -> github/java
 * [new branch]      ada        -> github/ada
 * [new branch]      lisp       -> github/lisp
EOF
)

	msg_from_fetch_without_new_branches=$(cat <<- EOF
 remote: Counting objects: 4006, done.
remote: Compressing objects: 100% (1322/1322), done.
remote: Total 2783 (delta 1526), reused 2587 (delta 1387)
Receiving objects: 100% (2783/2783), 1.23 MiB | 10 KiB/s, done.
Resolving deltas: 100% (1526/1526), completed with 387 local objects.
From github.com:schacon/hw
   8e29b09..c7c5a10  master     -> github/master
   0709fdc..d4ccf73  c-langs    -> github/c-langs
   6684f82..ae06d2b  java       -> github/java
EOF
)

	msg_from_fetch_with_new_branches_marked=$(cat <<- EOF
 remote: Counting objects: 4006, done.
remote: Compressing objects: 100% (1322/1322), done.
remote: Total 2783 (delta 1526), reused 2587 (delta 1387)
Receiving objects: 100% (2783/2783), 1.23 Mi B | 10 KiB/s, done.
Resolving deltas: 100% (1526/1526), completed with 387 local objects.
From github.com:schacon/hw
   8e29b09..c7c5a10  master     -> github/master
   0709fdc..d4ccf73  c-langs    -> github/c-langs
   6684f82..ae06d2b  java       -> github/java
 * [new branch]      ada.qa        -> github/ada
 * [new branch]      lisp.cr       -> github/lisp.cr
 * [new branch]      10344.dr       -> github/10344.dr
EOF
)


test_FindNewBranches_WhenPassedFetchData_ReturnsNewBranches() {
	branches=(`findNewBranches "$msg_from_fetch_with_new_branches"`)
	assertSame 'Should be ada but was ${branches[0]}' "${branches[0]}" 'ada'
	assertSame 'Should be lisp but was ${branches[1]}' "${branches[1]}" 'lisp'
}

test_FindNewBranches_WhenPassedFetchData_ReturnsNoNewBranches() {
	branches=(`findNewBranches "$msg_from_fetch_without_new_branches"`)
	assertSame "Should be null" "No.New.Branches" "${branches}"
}
test_findCodeReviewBranches_WhenPassedFetchData_ReturnsCRBranch() {
	branches=(`findNewBranches "$msg_from_fetch_with_new_branches_marked"`)
	findCodeReviewBranches "${branches[@]}"
	result=(`findCodeReviewBranches "${branches[@]}"`)
	assertSame "Should be lisp.cr" "lisp.cr" "${result[0]}"
}


test_findDesignReviewBranches_WhenPassedFetchData_ReturnsDRBranch() {
	branches=(`findNewBranches "$msg_from_fetch_with_new_branches_marked"`)
	findDesignReviewBranches "${branches[@]}"
	result=(`findDesignReviewBranches findQABranches findCodeReviewBranches "${branches[@]}"`)
	echo "$result"
	assertSame "Should be 10344.dr" "10344.dr" "${result[0]}"
}



test_findQABranches_WhenPassedFetchData_ReturnsQABranch() {
	branches=(`findNewBranches "$msg_from_fetch_with_new_branches_marked"`)
	findQABranches "${branches[@]}"
	result=(`findQABranches "${branches[@]}"`)
	assertSame "Should be ada.qa" "ada.qa" "${result[0]}"
}

test_findBranchByExtension_delegates_to_function_by_branch_extension()
{
	branches=(`findNewBranches "$msg_from_fetch_with_new_branches_marked"`)
	r=$(findBranchByExtension "dr" "${branches[@]}" )
	assertSame "Should be $r" "dr() called with 10344.dr" "$r"
}


_testAssertNotSame()
{
  msg='not same, with message'
  rslt=`assertNotSame "${MSG}" 'x' 'y' 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='not same'
  rslt=`assertNotSame 'x' 'y' 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='same'
  rslt=`assertNotSame 'x' 'x' 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}

  msg='null values'
  rslt=`assertNotSame '' '' 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}

  msg='too few arguments'
  rslt=`assertNotSame 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}
}

_testAssertNull()
{
  msg='null, with message'
  rslt=`assertNull "${MSG}" '' 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='null'
  rslt=`assertNull '' 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='not null'
  rslt=`assertNull 'x' 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}

  msg='too few arguments'
  rslt=`assertNull 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}
}

_testAssertNotNull()
{
  msg='not null, with message'
  rslt=`assertNotNull "${MSG}" 'x' 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='not null'
  rslt=`assertNotNull 'x' 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='null'
  rslt=`assertNotNull '' 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}

  msg='too few arguments'
  rslt=`assertNotNull 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}
}

_testAssertTrue()
{
  msg='true, with message'
  rslt=`assertTrue "${MSG}" 0 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='true'
  rslt=`assertTrue 0 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='true condition'
  rslt=`assertTrue "[ 0 -eq 0 ]" 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='false'
  rslt=`assertTrue 1 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}

  msg='false condition'
  rslt=`assertTrue "[ 0 -eq 1 ]" 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}

  msg='null value'
  rslt=`assertTrue '' 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}

  msg='too few arguments'
  rslt=`assertTrue 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}
}

_testAssertFalse()
{
  msg='false, with message'
  rslt=`assertFalse "${MSG}" 1 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='false'
  rslt=`assertFalse 1 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='false condition'
  rslt=`assertFalse "[ 0 -eq 1 ]" 2>&1`
  rtrn=$?
  assertSame "${msg}" '' "${rslt}"
  assertTrue "${msg}; failure" ${rtrn}

  msg='true'
  rslt=`assertFalse 0 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}

  msg='true condition'
  rslt=`assertFalse "[ 0 -eq 0 ]" 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}

  msg='null value'
  rslt=`assertFalse '' 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}

  msg='too few arguments'
  rslt=`assertFalse 2>&1`
  rtrn=$?
  assertNotSame "${msg}" '' "${rslt}"
  assertFalse "${msg}; failure" ${rtrn}
}

#-----------------------------------------------------------------------------
# suite functions
#

# load and run shUnit2
. ./shunit2
